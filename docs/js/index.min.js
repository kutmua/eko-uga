document.addEventListener("DOMContentLoaded", function () {
/* -------------------------------------------- */
  /* слайдер ДО и ПОСЛЕ (оставить только для GitHub) */
  const slider = document.querySelector('.contrast-slider-js');
  const before = document.querySelector('.before');
  const beforeImage = before.querySelector('img');
  const change = document.querySelector('.change');
  const body = document.body;

  let isActive = false;

  let width = slider.offsetWidth;
  beforeImage.style.width = `${width}px`;

  change.addEventListener('mousedown', () => {
    isActive = true;
  });

  body.addEventListener('mouseup', () => {
    isActive = false;
  });

  body.addEventListener('mouseleave', () => {
    isActive = false;
  });

  const beforeAfterSlider = (x) => {
    let shift = Math.max(0, Math.min(x, slider.offsetWidth));
    before.style.width = `${shift}px`;
    change.style.left = `${shift}px`;
  };

  const pauseEvents = (e) => {
    e.stopPropagation();
    e.preventDefault();
    return false;
  };

  body.addEventListener('mousemove', (e) => {
    if (!isActive) {
      return;
    }

    let x = e.pageX;
    x -= slider.getBoundingClientRect().left;
    beforeAfterSlider(x);
    pauseEvents(e);
  });

  change.addEventListener('touchstart', () => {
    isActive = true;
  });

  body.addEventListener('touchend', () => {
    isActive = false;
  });

  body.addEventListener('touchcancel', () => {
    isActive = false;
  });

  body.addEventListener('touchmove', (e) => {
    if (!isActive) {
      return;
    }

    let x;
    
    let i;
    for (i = 0; i < e.changedTouches.length; i++) {
      x = e.changedTouches[i].pageX; 
    }
    
    x -= slider.getBoundingClientRect().left;

    beforeAfterSlider(x);
    pauseEvents(e);
  });
/* -------------------------------------------- */
})
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlcyI6WyJpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCBmdW5jdGlvbiAoKSB7XHJcbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXHJcbiAgLyog0YHQu9Cw0LnQtNC10YAg0JTQniDQuCDQn9Ce0KHQm9CVICjQvtGB0YLQsNCy0LjRgtGMINGC0L7Qu9GM0LrQviDQtNC70Y8gR2l0SHViKSAqL1xyXG4gIGNvbnN0IHNsaWRlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jb250cmFzdC1zbGlkZXItanMnKTtcclxuICBjb25zdCBiZWZvcmUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYmVmb3JlJyk7XHJcbiAgY29uc3QgYmVmb3JlSW1hZ2UgPSBiZWZvcmUucXVlcnlTZWxlY3RvcignaW1nJyk7XHJcbiAgY29uc3QgY2hhbmdlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNoYW5nZScpO1xyXG4gIGNvbnN0IGJvZHkgPSBkb2N1bWVudC5ib2R5O1xyXG5cclxuICBsZXQgaXNBY3RpdmUgPSBmYWxzZTtcclxuXHJcbiAgbGV0IHdpZHRoID0gc2xpZGVyLm9mZnNldFdpZHRoO1xyXG4gIGJlZm9yZUltYWdlLnN0eWxlLndpZHRoID0gYCR7d2lkdGh9cHhgO1xyXG5cclxuICBjaGFuZ2UuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgKCkgPT4ge1xyXG4gICAgaXNBY3RpdmUgPSB0cnVlO1xyXG4gIH0pO1xyXG5cclxuICBib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCAoKSA9PiB7XHJcbiAgICBpc0FjdGl2ZSA9IGZhbHNlO1xyXG4gIH0pO1xyXG5cclxuICBib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCAoKSA9PiB7XHJcbiAgICBpc0FjdGl2ZSA9IGZhbHNlO1xyXG4gIH0pO1xyXG5cclxuICBjb25zdCBiZWZvcmVBZnRlclNsaWRlciA9ICh4KSA9PiB7XHJcbiAgICBsZXQgc2hpZnQgPSBNYXRoLm1heCgwLCBNYXRoLm1pbih4LCBzbGlkZXIub2Zmc2V0V2lkdGgpKTtcclxuICAgIGJlZm9yZS5zdHlsZS53aWR0aCA9IGAke3NoaWZ0fXB4YDtcclxuICAgIGNoYW5nZS5zdHlsZS5sZWZ0ID0gYCR7c2hpZnR9cHhgO1xyXG4gIH07XHJcblxyXG4gIGNvbnN0IHBhdXNlRXZlbnRzID0gKGUpID0+IHtcclxuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfTtcclxuXHJcbiAgYm9keS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCAoZSkgPT4ge1xyXG4gICAgaWYgKCFpc0FjdGl2ZSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHggPSBlLnBhZ2VYO1xyXG4gICAgeCAtPSBzbGlkZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdDtcclxuICAgIGJlZm9yZUFmdGVyU2xpZGVyKHgpO1xyXG4gICAgcGF1c2VFdmVudHMoZSk7XHJcbiAgfSk7XHJcblxyXG4gIGNoYW5nZS5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgKCkgPT4ge1xyXG4gICAgaXNBY3RpdmUgPSB0cnVlO1xyXG4gIH0pO1xyXG5cclxuICBib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgKCkgPT4ge1xyXG4gICAgaXNBY3RpdmUgPSBmYWxzZTtcclxuICB9KTtcclxuXHJcbiAgYm9keS5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGNhbmNlbCcsICgpID0+IHtcclxuICAgIGlzQWN0aXZlID0gZmFsc2U7XHJcbiAgfSk7XHJcblxyXG4gIGJvZHkuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgKGUpID0+IHtcclxuICAgIGlmICghaXNBY3RpdmUpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCB4O1xyXG4gICAgXHJcbiAgICBsZXQgaTtcclxuICAgIGZvciAoaSA9IDA7IGkgPCBlLmNoYW5nZWRUb3VjaGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIHggPSBlLmNoYW5nZWRUb3VjaGVzW2ldLnBhZ2VYOyBcclxuICAgIH1cclxuICAgIFxyXG4gICAgeCAtPSBzbGlkZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdDtcclxuXHJcbiAgICBiZWZvcmVBZnRlclNsaWRlcih4KTtcclxuICAgIHBhdXNlRXZlbnRzKGUpO1xyXG4gIH0pO1xyXG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xyXG59KSJdLCJmaWxlIjoiaW5kZXgubWluLmpzIn0=
